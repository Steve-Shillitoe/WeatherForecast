@page "/"
@using WeatherForecast.Models
@inject IJSRuntime js
@using System.Text
@using WeatherForecast.Shared
@inject HttpClient Http

<PageTitle>Weather Forecast</PageTitle>
@if (forecast == null)
{
 <p><em>@message</em></p>
}
else
{
    <div class="card-group">
        @foreach (var item in forecast.Daily.Take(5))
        {
            <DailyForecast Seconds="@item.Dt"
                           LowTemp="@item.Temp.Min"
                           HighTemp="@item.Temp.Max"
                           Description="@item.Weather[0].Description"
                           Icon="@item.Weather[0].Icon" />
        }
    </div>
}
@code {
    string message = "Loading...";
    Position? pos;
    OpenWeather? forecast;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await GetPositionAsync();
            await GetForecastAsync();
        }
        catch (Exception)
        {
            message = "Error encountered.";
        };
    }

    private async Task GetPositionAsync()
    {
        pos = await js.InvokeAsync<Position>(
        "bweInterop.getPosition");
    }

    private async Task GetForecastAsync()
    {
        if (pos != null)
        {
            // string APIKey = "{Your API Key}";
            // StringBuilder url = new StringBuilder();
            // url.Append("https://api.openweathermap.org");
            // url.Append("/data/2.5/onecall?");
            // url.Append("lat=");
            // url.Append(pos.Latitude);
            // url.Append("&lon=");
            // url.Append(pos.Longitude);
            // url.Append("&exclude=");
            // url.Append("current,minutely,hourly,alerts");
            // url.Append("&units=imperial");
            // url.Append("&appid=");
            // url.Append(APIKey);
            forecast = await Http.GetFromJsonAsync<OpenWeather>("sample-data/weather.json");
            
        }

    }

}
